import{_ as n,c as i,b as t,o as a}from"./app-tfAcked9.js";const o={};function l(s,e){return a(),i("div",null,e[0]||(e[0]=[t('<h2 id="concepts" tabindex="-1"><a class="header-anchor" href="#concepts"><span>Concepts</span></a></h2><p><strong>Front-end Engineering</strong> refers to the application of software engineering principles and best practices in the front-end development process to enhance code maintainability, scalability, and efficiency. This encompasses, but is not limited to, the following aspects:</p><ol><li><strong>Modular Development</strong>: Breaking down front-end code into reusable modules or components to facilitate easier management and maintenance.</li><li><strong>Build Tools and Automation</strong>: Utilizing tools such as Webpack, Gulp, or Parcel to automate tasks like bundling, minification, and code transpilation.</li><li><strong>Code Standards and Quality Control</strong>: Implementing tools like ESLint and Prettier to ensure code consistency and maintain high quality.</li><li><strong>Version Control</strong>: Using version control systems like Git to manage code changes and collaborate effectively with team members.</li><li><strong>Continuous Integration and Continuous Deployment (CI/CD)</strong>: Automating testing and deployment processes to ensure code stability and enable rapid delivery.</li><li><strong>Performance Optimization</strong>: Applying various optimization techniques, such as lazy loading, code splitting, and caching strategies, to improve front-end performance.</li><li><strong>Testing</strong>: Writing unit tests, integration tests, and end-to-end tests to ensure the correctness and reliability of front-end functionalities.</li></ol><h2 id="modularization" tabindex="-1"><a class="header-anchor" href="#modularization"><span>Modularization</span></a></h2><h3 id="standards" tabindex="-1"><a class="header-anchor" href="#standards"><span>Standards</span></a></h3><ul><li><strong>CommonJS (CJS)</strong>: Works at runtime, uses <code>require</code>.</li><li><strong>ECMAScript Module (ESM)</strong>: Works at compile time and runtime, uses <code>import</code>.</li></ul><h3 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation"><span>Implementation</span></a></h3><ol><li><strong>Browser ESM</strong></li><li><strong>Node.js</strong>: Supports both CommonJS and ESM.</li><li><strong>Build Tools</strong>: Tools like Vue CLI, Vite, Create React App (CRA), and UmiJS support both CommonJS and ESM.</li></ol><h2 id="package-management" tabindex="-1"><a class="header-anchor" href="#package-management"><span>Package Management</span></a></h2><ul><li><strong>npm</strong>: Manages package attributes, registry, and CLI. <ul><li><strong>CLI</strong>: Command-Line Interface</li></ul></li></ul><h2 id="language-problems" tabindex="-1"><a class="header-anchor" href="#language-problems"><span>Language Problems</span></a></h2><h3 id="js-tool-chain" tabindex="-1"><a class="header-anchor" href="#js-tool-chain"><span>JS Tool Chain</span></a></h3><ol><li>Compatibility: <ul><li>API Compatibility <ul><li>Polyfill: core-js</li></ul></li><li>Syntax Compatibility <ul><li>syntax transformer(runtime) <ul><li>regenerator: async await</li></ul></li></ul></li></ul></li><li>Syntax Enhancement <ul><li>TypeScript</li><li>jsx</li></ul></li></ol><p>babel(Integrated transformer)</p><h3 id="css-tool-chain" tabindex="-1"><a class="header-anchor" href="#css-tool-chain"><span>CSS Tool Chain</span></a></h3><ol><li>Syntax lacks (loop, condition, concatenation)</li><li>Function lacks (color manipulation, math functions, customized functions)</li></ol><p>sass/less/stylus -&gt; css pre-compiler -&gt; css -&gt; Post Compressor(Vendor Prefix,Code Minification,Code Pruning (commonly referred to as Tree Shaking in modern development),css module)-&gt;css Or: css -&gt; postcss-&gt;css</p><h4 id="post-compressor" tabindex="-1"><a class="header-anchor" href="#post-compressor"><span>Post Compressor</span></a></h4><ol><li><p>Vendor Prefix</p><ul><li>autoprefixer</li></ul></li><li><p>Code Minification</p><ul><li>cssnano</li></ul></li><li><p>Code Pruning</p><ul><li>purgecss</li></ul></li><li><p>Class Name Conflicts</p><ul><li>css module</li></ul></li></ol><h2 id="engineering-problems" tabindex="-1"><a class="header-anchor" href="#engineering-problems"><span>Engineering Problems</span></a></h2>',20)]))}const c=n(o,[["render",l],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/guide/materials/font-end-engineering/basic/","title":"Basic","lang":"en-US","frontmatter":{"title":"Basic","createTime":"2024/12/14 11:13:44","permalink":"/guide/materials/font-end-engineering/basic/","description":"Concepts Front-end Engineering refers to the application of software engineering principles and best practices in the front-end development process to enhance code maintainabili...","head":[["meta",{"property":"og:url","content":"https://jackpanger.github.io/guide/materials/font-end-engineering/basic/"}],["meta",{"property":"og:site_name","content":"Phoat"}],["meta",{"property":"og:title","content":"Basic"}],["meta",{"property":"og:description","content":"Concepts Front-end Engineering refers to the application of software engineering principles and best practices in the front-end development process to enhance code maintainabili..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-10T14:15:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-10T14:15:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Basic\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-10T14:15:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Concepts","slug":"concepts","link":"#concepts","children":[]},{"level":2,"title":"Modularization","slug":"modularization","link":"#modularization","children":[{"level":3,"title":"Standards","slug":"standards","link":"#standards","children":[]},{"level":3,"title":"Implementation","slug":"implementation","link":"#implementation","children":[]}]},{"level":2,"title":"Package Management","slug":"package-management","link":"#package-management","children":[]},{"level":2,"title":"Language Problems","slug":"language-problems","link":"#language-problems","children":[{"level":3,"title":"JS Tool Chain","slug":"js-tool-chain","link":"#js-tool-chain","children":[]},{"level":3,"title":"CSS Tool Chain","slug":"css-tool-chain","link":"#css-tool-chain","children":[]}]},{"level":2,"title":"Engineering Problems","slug":"engineering-problems","link":"#engineering-problems","children":[]}],"readingTime":{"minutes":1.18,"words":354},"git":{"createdTime":1739196917000,"updatedTime":1739196917000,"contributors":[{"name":"Jack Pang","email":"jp6862@nyu.edu","commits":1}]},"autoDesc":true,"filePathRelative":"notes/guide/material/font-end-engineering/basic.md","bulletin":false}');export{c as comp,d as data};
